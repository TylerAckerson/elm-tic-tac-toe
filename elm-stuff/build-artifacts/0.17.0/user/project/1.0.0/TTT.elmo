var _user$project$TTT$Model = F2(
	function (a, b) {
		return {positions: a, current: b};
	});
var _user$project$TTT$IndexedPosition = F3(
	function (a, b, c) {
		return {id: a, pos: b, model: c};
	});
var _user$project$TTT$init = {
	positions: _elm_lang$core$Native_List.fromArray(
		[
			A3(
			_user$project$TTT$IndexedPosition,
			0,
			{ctor: '_Tuple2', _0: 0, _1: 0},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			1,
			{ctor: '_Tuple2', _0: 0, _1: 1},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			2,
			{ctor: '_Tuple2', _0: 0, _1: 2},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			3,
			{ctor: '_Tuple2', _0: 1, _1: 0},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			4,
			{ctor: '_Tuple2', _0: 1, _1: 1},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			5,
			{ctor: '_Tuple2', _0: 1, _1: 2},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			6,
			{ctor: '_Tuple2', _0: 2, _1: 0},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			7,
			{ctor: '_Tuple2', _0: 2, _1: 1},
			_user$project$Position$init('_')),
			A3(
			_user$project$TTT$IndexedPosition,
			8,
			{ctor: '_Tuple2', _0: 2, _1: 2},
			_user$project$Position$init('_'))
		]),
	current: 'X'
};
var _user$project$TTT$updateHelp = F4(
	function (targetId, player, msg, _p0) {
		var _p1 = _p0;
		var _p3 = _p1.model;
		var _p2 = _p1.id;
		return A3(
			_user$project$TTT$IndexedPosition,
			_p2,
			_p1.pos,
			_elm_lang$core$Native_Utils.eq(targetId, _p2) ? A3(_user$project$Position$update, msg, player, _p3) : _p3);
	});
var _user$project$TTT$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'Reset':
				return _user$project$TTT$init;
			case 'Select':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						positions: A2(
							_elm_lang$core$List$map,
							A3(_user$project$TTT$updateHelp, _p4._0, model.current, _p4._1),
							model.positions),
						current: _elm_lang$core$Native_Utils.eq(model.current, 'X') ? 'O' : 'X'
					});
			default:
				return model;
		}
	});
var _user$project$TTT$NoOp = function (a) {
	return {ctor: 'NoOp', _0: a};
};
var _user$project$TTT$Select = F2(
	function (a, b) {
		return {ctor: 'Select', _0: a, _1: b};
	});
var _user$project$TTT$viewIndexedPosition = function (_p5) {
	var _p6 = _p5;
	var _p7 = _p6.model;
	return A2(
		_elm_lang$html$Html_App$map,
		_elm_lang$core$Native_Utils.eq(_p7, '_') ? _user$project$TTT$Select(_p6.id) : _user$project$TTT$NoOp,
		_user$project$Position$view(_p7));
};
var _user$project$TTT$Reset = {ctor: 'Reset'};
var _user$project$TTT$view = function (model) {
	var positions = A2(_elm_lang$core$List$map, _user$project$TTT$viewIndexedPosition, model.positions);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('tic-tac-toe')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('current')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Current player: ')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('player')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.current)
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('board')
					]),
				positions),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$TTT$Reset)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('RESET')
					]))
			]));
};
var _user$project$TTT$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$TTT$init, view: _user$project$TTT$view, update: _user$project$TTT$update})
};
