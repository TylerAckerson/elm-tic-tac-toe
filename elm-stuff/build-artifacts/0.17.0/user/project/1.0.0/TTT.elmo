var _user$project$TTT$checkCrosses = function (model) {
	var rightToLeft = A2(
		_elm_lang$core$List$filter,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.id, 2) || (_elm_lang$core$Native_Utils.eq(x.id, 4) || _elm_lang$core$Native_Utils.eq(x.id, 6));
		},
		model.positions);
	var leftToRight = A2(
		_elm_lang$core$List$filter,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.id, 0) || (_elm_lang$core$Native_Utils.eq(x.id, 4) || _elm_lang$core$Native_Utils.eq(x.id, 8));
		},
		model.positions);
	return (A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		leftToRight) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		leftToRight)) ? true : ((A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		rightToLeft) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		rightToLeft)) ? true : false);
};
var _user$project$TTT$checkColumns = function (model) {
	var right = A2(
		_elm_lang$core$List$filter,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(
				A2(_elm_lang$core$Basics$rem, x.id, 3),
				2);
		},
		model.positions);
	var mid = A2(
		_elm_lang$core$List$filter,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(
				A2(_elm_lang$core$Basics$rem, x.id, 3),
				1);
		},
		model.positions);
	var left = A2(
		_elm_lang$core$List$filter,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(
				A2(_elm_lang$core$Basics$rem, x.id, 3),
				0);
		},
		model.positions);
	return (A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		left) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		left)) ? true : ((A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		mid) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		mid)) ? true : ((A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		right) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		right)) ? true : false));
};
var _user$project$TTT$checkRows = function (model) {
	var bottom = A2(_elm_lang$core$List$drop, 3, model.positions);
	var mid = A2(
		_elm_lang$core$List$drop,
		3,
		A2(_elm_lang$core$List$take, 6, model.positions));
	var top = A2(_elm_lang$core$List$take, 3, model.positions);
	return (A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		top) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		top)) ? true : ((A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		mid) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		mid)) ? true : ((A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'X');
		},
		bottom) || A2(
		_elm_lang$core$List$all,
		function (x) {
			return _elm_lang$core$Native_Utils.eq(x.model, 'O');
		},
		bottom)) ? true : false));
};
var _user$project$TTT$isGameOver = function (model) {
	return (_user$project$TTT$checkRows(model) || (_user$project$TTT$checkColumns(model) || _user$project$TTT$checkCrosses(model))) ? true : false;
};
var _user$project$TTT$coordHelp = function (id) {
	return {
		ctor: '_Tuple2',
		_0: (id / 3) | 0,
		_1: A2(_elm_lang$core$Basics$rem, id, 3)
	};
};
var _user$project$TTT$Model = F3(
	function (a, b, c) {
		return {positions: a, current: b, gameOver: c};
	});
var _user$project$TTT$IndexedPosition = F3(
	function (a, b, c) {
		return {id: a, pos: b, model: c};
	});
var _user$project$TTT$modelHelp = function (id) {
	return A3(
		_user$project$TTT$IndexedPosition,
		id,
		_user$project$TTT$coordHelp(id),
		_user$project$Position$init('_'));
};
var _user$project$TTT$init = {
	positions: A2(
		_elm_lang$core$List$map,
		_user$project$TTT$modelHelp,
		_elm_lang$core$Native_List.range(0, 8)),
	current: 'X',
	gameOver: false
};
var _user$project$TTT$updateHelp = F4(
	function (targetId, player, msg, _p0) {
		var _p1 = _p0;
		var _p3 = _p1.model;
		var _p2 = _p1.id;
		return A3(
			_user$project$TTT$IndexedPosition,
			_p2,
			_p1.pos,
			_elm_lang$core$Native_Utils.eq(targetId, _p2) ? A3(_user$project$Position$update, msg, player, _p3) : _p3);
	});
var _user$project$TTT$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'Reset':
				return _user$project$TTT$init;
			case 'Select':
				return _elm_lang$core$Native_Utils.update(
					model,
					{
						positions: A2(
							_elm_lang$core$List$map,
							A3(_user$project$TTT$updateHelp, _p4._0, model.current, _p4._1),
							model.positions),
						current: _elm_lang$core$Native_Utils.eq(model.current, 'X') ? 'O' : 'X',
						gameOver: _user$project$TTT$isGameOver(model)
					});
			default:
				return model;
		}
	});
var _user$project$TTT$NoOp = function (a) {
	return {ctor: 'NoOp', _0: a};
};
var _user$project$TTT$Select = F2(
	function (a, b) {
		return {ctor: 'Select', _0: a, _1: b};
	});
var _user$project$TTT$viewIndexedPosition = function (_p5) {
	var _p6 = _p5;
	var _p7 = _p6.model;
	return A2(
		_elm_lang$html$Html_App$map,
		_elm_lang$core$Native_Utils.eq(_p7, '_') ? _user$project$TTT$Select(_p6.id) : _user$project$TTT$NoOp,
		_user$project$Position$view(_p7));
};
var _user$project$TTT$Reset = {ctor: 'Reset'};
var _user$project$TTT$view = function (model) {
	var positions = A2(_elm_lang$core$List$map, _user$project$TTT$viewIndexedPosition, model.positions);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('tic-tac-toe')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('current')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Current player: ')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('player')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(model.current)
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('board')
					]),
				positions),
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Events$onClick(_user$project$TTT$Reset)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('RESET')
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('status')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						_elm_lang$core$Native_Utils.eq(model.gameOver, true) ? 'Game over' : 'Playing')
					]))
			]));
};
var _user$project$TTT$main = {
	main: _elm_lang$html$Html_App$beginnerProgram(
		{model: _user$project$TTT$init, view: _user$project$TTT$view, update: _user$project$TTT$update})
};
